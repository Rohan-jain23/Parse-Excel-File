{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../file-upload.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FileUploadComponent_tr_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 10);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const data_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(data_r1.Timestamp);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(data_r1.file);\n  }\n}\nexport class FileUploadComponent {\n  constructor(fileUploadService) {\n    this.fileUploadService = fileUploadService;\n    this.file = null;\n    this.name = \"\";\n    this.timestamp = new Date().toISOString();\n    this.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    this.browser = window.navigator.userAgent;\n    this.myGroup = new FormGroup({\n      chartname: new FormControl()\n    });\n  }\n  onFileSelected(event) {\n    //this.file = event.target.files[0];\n    let file = event.target.files[0];\n    let fileReader = new FileReader();\n    fileReader.readAsBinaryString(file);\n    fileReader.onload = e => {\n      var workBook = XLSX.read(fileReader.result, {\n        type: 'binary'\n      });\n      var sheetNames = workBook.SheetNames;\n      this.ExcelData = XLSX.utils.sheet_to_json(workBook.Sheets[sheetNames[0]]);\n      console.log(this.ExcelData);\n    };\n  }\n  onSubmit() {\n    this.name = this.myGroup.value.chartname;\n    if (!this.file) {\n      // alert('Please select a file to upload');\n      return;\n    }\n    this.fileUploadService.uploadFile(this.file, this.name, this.timestamp, this.timezone, this.browser).subscribe(response => console.log(response), error => console.log(error));\n  }\n}\nFileUploadComponent.ɵfac = function FileUploadComponent_Factory(t) {\n  return new (t || FileUploadComponent)(i0.ɵɵdirectiveInject(i1.FileUploadService));\n};\nFileUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FileUploadComponent,\n  selectors: [[\"app-file-upload\"]],\n  decls: 34,\n  vars: 2,\n  consts: [[3, \"formGroup\"], [\"for\", \"file\"], [\"formControlName\", \"chartname\", \"type\", \"text\", \"placeholder\", \"ChartName\", \"required\", \"\"], [\"type\", \"file\", \"id\", \"file\", \"accept\", \".csv\", \"required\", \"\", 3, \"change\"], [\"type\", \"submit\", 3, \"click\"], [2, \"width\", \"50%\", \"margin-left\", \"20%\"], [2, \"text-align\", \"center\"], [1, \"table-table-strped\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [\"scope\", \"row\"]],\n  template: function FileUploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2, \"ChartName:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2)(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\", 1);\n      i0.ɵɵtext(7, \"Upload File:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 3);\n      i0.ɵɵlistener(\"change\", function FileUploadComponent_Template_input_change_8_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵelementStart(10, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function FileUploadComponent_Template_button_click_10_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(11, \"Submit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(12, \"br\")(13, \"br\")(14, \"br\")(15, \"br\")(16, \"br\")(17, \"br\")(18, \"br\")(19, \"br\");\n      i0.ɵɵelementStart(20, \"div\", 5)(21, \"h3\", 6);\n      i0.ɵɵtext(22, \"Excel Data in HTML Table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"table\", 7);\n      i0.ɵɵelementStart(24, \"thead\")(25, \"tr\")(26, \"th\", 8);\n      i0.ɵɵtext(27, \"Timestamp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"th\", 8);\n      i0.ɵɵtext(29, \"Process Data Memory\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"th\", 8);\n      i0.ɵɵtext(31, \"Heap Data Memory\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"tbody\");\n      i0.ɵɵtemplate(33, FileUploadComponent_tr_33_Template, 5, 2, \"tr\", 9);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.myGroup);\n      i0.ɵɵadvance(33);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ExcelData);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"form[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n    margin-top: 1rem;\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\ninput[_ngcontent-%COMP%] {\\r\\n    margin-left: 0.5rem;\\r\\n    padding: 0.5rem;\\r\\n    border: 1px solid gray;\\r\\n    border-radius: 4px;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n    margin-top: 1rem;\\r\\n    padding: 0.5rem 1rem;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    background-color: blue;\\r\\n    color: white;\\r\\n    cursor: pointer;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLGVBQWU7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJmb3JtIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxubGFiZWwge1xyXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5pbnB1dCB7XHJcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtO1xyXG4gICAgcGFkZGluZzogMC41cmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxufVxyXG5cclxuYnV0dG9uIHtcclxuICAgIG1hcmdpbi10b3A6IDFyZW07XHJcbiAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","XLSX","i0","FileUploadComponent","constructor","fileUploadService","Date","toISOString","Intl","DateTimeFormat","resolvedOptions","timeZone","window","navigator","userAgent","chartname","onFileSelected","event","file","target","files","fileReader","FileReader","readAsBinaryString","onload","e","workBook","read","result","type","sheetNames","SheetNames","ExcelData","utils","sheet_to_json","Sheets","console","log","onSubmit","name","myGroup","value","uploadFile","timestamp","timezone","browser","subscribe","response","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\jainroh\\source\\repos\\WebApplication16\\WebApplication16\\angular-app\\src\\app\\file-upload\\file-upload.component.ts","C:\\Users\\jainroh\\source\\repos\\WebApplication16\\WebApplication16\\angular-app\\src\\app\\file-upload\\file-upload.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { FileUploadService } from '../file-upload.service';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as XLSX from 'xlsx'\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.css']\n})\nexport class FileUploadComponent {\n  file: File | null = null;\n  name: string = \"\";\n  timestamp: string = new Date().toISOString();\n  timezone: string = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  browser: string = window.navigator.userAgent;\n  \n  ExcelData: any;\n  myGroup = new FormGroup({\n    chartname: new FormControl()\n});\n\n  constructor(private fileUploadService: FileUploadService) {\n  }\n\n  onFileSelected(event: any) {\n    //this.file = event.target.files[0];\n    let file = event.target.files[0];\n    let fileReader = new  FileReader();\n    fileReader.readAsBinaryString(file);\n    fileReader.onload =(e)=>{\n      var workBook =XLSX.read(fileReader.result,{type:'binary'});\n      var sheetNames = workBook.SheetNames;\n      this.ExcelData = XLSX.utils.sheet_to_json(workBook.Sheets[sheetNames[0]])\n      console.log(this.ExcelData)\n    }\n  }\n  onSubmit() {\n\n      this.name = this.myGroup.value.chartname;\n    if (!this.file) {\n     // alert('Please select a file to upload');\n      return;\n    }\n\n    this.fileUploadService.uploadFile(this.file, this.name, this.timestamp, this.timezone, this.browser)\n      .subscribe(\n        (response) => console.log(response),\n        (error) => console.log(error)\n      );\n  }\n}\n","\n\n<form [formGroup]=\"myGroup\">\n        <label for=\"file\">ChartName:</label>\n          <input formControlName=\"chartname\" type=\"text\"placeholder=\"ChartName\" required>\n\n  <br>\n  <div>\n    <label for=\"file\">Upload File:</label>\n    <input type=\"file\" id=\"file\" (change)=\"onFileSelected($event)\" accept=\".csv\" required>\n  </div>\n  <br>\n  <button type=\"submit\" (click)=\"onSubmit()\">Submit</button>\n</form>\n\n<br><br><br><br><br><br><br><br>\n<div style =\"width: 50%; margin-left:20%\">\n<h3 style  =\"text-align:center;\">Excel Data in HTML Table</h3>\n<table class= \"table-table-strped\"></table>\n<thead>\n<tr>\n  <th scope =\"col\">Timestamp</th>\n  <th scope =\"col\">Process Data Memory</th>\n  <th scope =\"col\">Heap Data Memory</th>\n</tr>\n</thead>\n<tbody>\n  <tr *ngFor=\"let data of ExcelData\">\n    <th scope=\"row\">{{data.Timestamp}}</th>\n    <th scope=\"row\">{{data.file}}</th>\n  </tr>\n</tbody>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}