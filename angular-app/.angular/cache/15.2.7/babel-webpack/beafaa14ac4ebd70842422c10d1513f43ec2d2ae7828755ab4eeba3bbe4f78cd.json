{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./chart.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"chartCanvas\"];\nfunction ChartComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ChartComponent_tr_13_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const user_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.plotChart(user_r1.FileColumn));\n    });\n    i0.ɵɵtext(11, \"Show Chart\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const user_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r1.chartName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r1.timeStamp);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r1.timezone);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(user_r1.showChart);\n  }\n}\nexport class ChartComponent {\n  constructor(api) {\n    this.api = api;\n    this.mydata = [];\n    this.arr = [233, 2323, 4453];\n    this.data = [];\n  }\n  ngOnInit() {\n    this.api.apiCall().subscribe(data => {\n      this.mydata = data.value;\n      console.log(\"get api data\", this.mydata);\n    });\n  }\n  plotChart(file) {\n    console.log(\"file data is \" + file);\n    this.data = JSON.parse(file);\n    const ctx = document.getElementById('chartCanvas');\n    const timestamps = this.data.map(item => item.TimeStamp);\n    const processedData = this.data.map(item => parseInt(item.ProcessedDataMemory));\n    const heapData = this.data.map(item => parseInt(item.HeapDataMemory));\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: timestamps,\n        datasets: [{\n          label: 'Processed Data Memory',\n          data: processedData,\n          borderColor: 'blue'\n        }, {\n          label: 'Heap Data Memory',\n          data: heapData,\n          borderColor: 'green'\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'TimeStamp'\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Memory'\n            }\n          }\n        }\n      }\n    });\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.ChartService));\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"app-chart\"]],\n  viewQuery: function ChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartCanvas = _t.first);\n    }\n  },\n  decls: 17,\n  vars: 1,\n  consts: [[1, \"container\"], [1, \"table\", \"table-trapped\"], [4, \"ngFor\", \"ngForOf\"], [\"id\", \"chartModal\", 1, \"modal\"], [1, \"modal-content\"], [\"id\", \"chartCanvas\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\");\n      i0.ɵɵtext(5, \"ChartName\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\");\n      i0.ɵɵtext(7, \"TimeStamp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"TimeZone\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Show chart\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"tbody\");\n      i0.ɵɵtemplate(13, ChartComponent_tr_13_Template, 12, 4, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"div\", 3)(15, \"div\", 4);\n      i0.ɵɵelement(16, \"canvas\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.mydata);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Chart","i0","ChartComponent","constructor","api","ngOnInit","apiCall","subscribe","data","mydata","value","console","log","plotChart","file","JSON","parse","ctx","document","getElementById","timestamps","map","item","TimeStamp","processedData","parseInt","ProcessedDataMemory","heapData","HeapDataMemory","type","labels","datasets","label","borderColor","options","scales","x","display","title","text","y","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\jainroh\\Desktop\\WebApplication16\\WebApplication16\\angular-app\\src\\app\\chart\\chart.component.ts","C:\\Users\\jainroh\\Desktop\\WebApplication16\\WebApplication16\\angular-app\\src\\app\\chart\\chart.component.html"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { Chart } from 'chart.js';\r\nimport { ChartService } from './chart.service';\n\n\ninterface DataItem {\n    TimeStamp: string;\n    ProcessedDataMemory: string;\n    HeapDataMemory: string;\n}\n\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent {\n    fileData: any;\n    mydata: DataItem[] = [];\n    constructor(private api: ChartService) {\n\n    }\n    ngOnInit() {\n        this.api.apiCall().subscribe((data: any) => {\n            this.mydata = data.value;\n            console.log(\"get api data\", this.mydata);\r\n        })\n    }\n    arr: any = [233, 2323, 4453];\n\n    @ViewChild('chartCanvas')\n    chartCanvas!: ElementRef<HTMLCanvasElement>;\n    data: DataItem[] = [];\n\n    plotChart(file: any) {\n        console.log(\"file data is \" + file);\n        this.data = JSON.parse(file);\n        const ctx = document.getElementById('chartCanvas') as HTMLCanvasElement;\n        const timestamps = this.data.map(item => item.TimeStamp);\n        const processedData = this.data.map(item => parseInt(item.ProcessedDataMemory));\n        const heapData = this.data.map(item => parseInt(item.HeapDataMemory));\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: timestamps,\n                datasets: [\n                    {\n                        label: 'Processed Data Memory',\n                        data: processedData,\n                        borderColor: 'blue'\n                    },\n                    {\n                        label: 'Heap Data Memory',\n                        data: heapData,\n                        borderColor: 'green'\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    x: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'TimeStamp'\n                        }\n                    },\n                    y: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'Memory'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}","<div class=\"container\">\n    <table class=\"table table-trapped\">\n\n        <thead>\n            <tr>\n                <th>ChartName</th>\n                <th>TimeStamp</th>\n                <th>TimeZone</th>\n                <th>Show chart</th>\n            </tr>\n        </thead>\n<tbody>\n    <tr *ngFor=\"let user of mydata\">\n        <td>{{ user.chartName }}</td>\n        <td>{{ user.timeStamp }}</td>\n        <td>{{ user.timezone }}</td>\n        <td>{{user.showChart}}</td>\n        <td>\n            <button class=\"btn btn-primary\" (click)=\"plotChart(user.FileColumn)\">Show Chart</button>\n        </td>\n    </tr>\n</tbody>\n    </table>\n</div>\n<div id=\"chartModal\" class=\"modal\">\n    <div class=\"modal-content\">\n\n        <canvas id=\"chartCanvas\"></canvas>\n        </div>\n    </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}