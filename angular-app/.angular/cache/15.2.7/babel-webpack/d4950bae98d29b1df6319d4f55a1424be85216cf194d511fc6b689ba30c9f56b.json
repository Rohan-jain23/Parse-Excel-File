{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Chart } from 'chart.js';\nlet ChartComponent = class ChartComponent {\n  constructor(api) {\n    this.api = api;\n    this.mydata = [];\n    this.arr = [233, 2323, 4453];\n    this.data = [];\n  }\n  ngOnInit() {\n    this.api.apiCall().subscribe(data => {\n      this.mydata = data.value;\n      console.log(\"get api data\", this.mydata);\n    });\n  }\n  plotChart(file) {\n    console.log(\"file data is \" + file);\n    this.data = JSON.parse(file);\n    const ctx = document.getElementById('chartCanvas');\n    const timestamps = this.data.map(item => item.TimeStamp);\n    const processedData = this.data.map(item => parseInt(item.ProcessedDataMemory));\n    const heapData = this.data.map(item => parseInt(item.HeapDataMemory));\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: timestamps,\n        datasets: [{\n          label: 'Processed Data Memory',\n          data: processedData,\n          borderColor: 'blue'\n        }, {\n          label: 'Heap Data Memory',\n          data: heapData,\n          borderColor: 'green'\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'TimeStamp'\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Memory'\n            }\n          }\n        }\n      }\n    });\n  }\n};\n__decorate([ViewChild('chartCanvas')], ChartComponent.prototype, \"chartCanvas\", void 0);\nChartComponent = __decorate([Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})], ChartComponent);\nexport { ChartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAcC,SAAS,QAAQ,eAAe;AAChE,SAASC,KAAK,QAAQ,UAAU;AAgBzB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGvBC,YAAoBC,GAAiB;IAAjB,QAAG,GAAHA,GAAG;IADvB,WAAM,GAAe,EAAE;IAUvB,QAAG,GAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAI5B,SAAI,GAAe,EAAE;EAXrB;EACAC,QAAQ;IACJ,IAAI,CAACD,GAAG,CAACE,OAAO,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MACvC,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACE,KAAK;MACxBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACH,MAAM,CAAC;IAC5C,CAAC,CAAC;EACN;EAOAI,SAAS,CAACC,IAAS;IACfH,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGE,IAAI,CAAC;IACnC,IAAI,CAACN,IAAI,GAAGO,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;IAC5B,MAAMG,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAsB;IACvE,MAAMC,UAAU,GAAG,IAAI,CAACZ,IAAI,CAACa,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC;IACxD,MAAMC,aAAa,GAAG,IAAI,CAAChB,IAAI,CAACa,GAAG,CAACC,IAAI,IAAIG,QAAQ,CAACH,IAAI,CAACI,mBAAmB,CAAC,CAAC;IAC/E,MAAMC,QAAQ,GAAG,IAAI,CAACnB,IAAI,CAACa,GAAG,CAACC,IAAI,IAAIG,QAAQ,CAACH,IAAI,CAACM,cAAc,CAAC,CAAC;IAErE,IAAI3B,KAAK,CAACgB,GAAG,EAAE;MACXY,IAAI,EAAE,MAAM;MACZrB,IAAI,EAAE;QACFsB,MAAM,EAAEV,UAAU;QAClBW,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,uBAAuB;UAC9BxB,IAAI,EAAEgB,aAAa;UACnBS,WAAW,EAAE;SAChB,EACD;UACID,KAAK,EAAE,kBAAkB;UACzBxB,IAAI,EAAEmB,QAAQ;UACdM,WAAW,EAAE;SAChB;OAER;MACDC,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,OAAO,EAAE,IAAI;YACbC,KAAK,EAAE;cACHD,OAAO,EAAE,IAAI;cACbE,IAAI,EAAE;;WAEb;UACDC,CAAC,EAAE;YACCH,OAAO,EAAE,IAAI;YACbC,KAAK,EAAE;cACHD,OAAO,EAAE,IAAI;cACbE,IAAI,EAAE;;;;;KAKzB,CAAC;EACN;CACH;AAhDGE,YADCzC,SAAS,CAAC,aAAa,CAAC,mDACmB;AAfnCE,cAAc,eAL1BH,SAAS,CAAC;EACT2C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW1C,cAAc,CA+D1B;SA/DYA,cAAc","names":["Component","ViewChild","Chart","ChartComponent","constructor","api","ngOnInit","apiCall","subscribe","data","mydata","value","console","log","plotChart","file","JSON","parse","ctx","document","getElementById","timestamps","map","item","TimeStamp","processedData","parseInt","ProcessedDataMemory","heapData","HeapDataMemory","type","labels","datasets","label","borderColor","options","scales","x","display","title","text","y","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\jainroh\\Desktop\\WebApplication16\\WebApplication16\\angular-app\\src\\app\\chart\\chart.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { Chart } from 'chart.js';\r\nimport { ChartService } from './chart.service';\n\n\ninterface DataItem {\n    TimeStamp: string;\n    ProcessedDataMemory: string;\n    HeapDataMemory: string;\n}\n\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent {\n    fileData: any;\n    mydata: DataItem[] = [];\n    constructor(private api: ChartService) {\n\n    }\n    ngOnInit() {\n        this.api.apiCall().subscribe((data: any) => {\n            this.mydata = data.value;\n            console.log(\"get api data\", this.mydata);\r\n        })\n    }\n    arr: any = [233, 2323, 4453];\n\n    @ViewChild('chartCanvas')\n    chartCanvas!: ElementRef<HTMLCanvasElement>;\n    data: DataItem[] = [];\n\n    plotChart(file: any) {\n        console.log(\"file data is \" + file);\n        this.data = JSON.parse(file);\n        const ctx = document.getElementById('chartCanvas') as HTMLCanvasElement;\n        const timestamps = this.data.map(item => item.TimeStamp);\n        const processedData = this.data.map(item => parseInt(item.ProcessedDataMemory));\n        const heapData = this.data.map(item => parseInt(item.HeapDataMemory));\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: timestamps,\n                datasets: [\n                    {\n                        label: 'Processed Data Memory',\n                        data: processedData,\n                        borderColor: 'blue'\n                    },\n                    {\n                        label: 'Heap Data Memory',\n                        data: heapData,\n                        borderColor: 'green'\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    x: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'TimeStamp'\n                        }\n                    },\n                    y: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'Memory'\n                        }\n                    }\n                }\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}